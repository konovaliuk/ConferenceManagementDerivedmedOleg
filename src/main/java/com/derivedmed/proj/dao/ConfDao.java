package com.derivedmed.proj.dao;

import com.derivedmed.proj.model.Conf;
import com.derivedmed.proj.util.PreparedStatmentCompilier;
import com.derivedmed.proj.util.rsparser.ResultSetParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class ConfDao implements CrudDao<Conf> {

    private static Logger LOGGER = LogManager.getLogger(ConfDao.class);
    private static final String SQL_EXCEPTION = "SQL exception Conf DAO";
    private static final String sql = "insert into confs (conf_name, conf_place, confDate) values (?, ? ,?)";
    private static final String selectSql = "select * from confs where conf_id = ?";
    private static final String updateSql = "update confs set conf_name = ?, conf_place = ?, confDate = ? where conf_id = ?";
    private static final String deleteSql = "delete from confs where conf_id = ?";
    private static final String selectAllSql = "select * from confs";
    private static final String clearAllSql = "delete from confs";

    @Override
    public int create(Conf conf) {
        int autoGeneratedId = 0;
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                     .prepareStatement(sql, Statement.RETURN_GENERATED_KEYS), new Object[]{conf.getName(), conf.getPlace(), conf.getDate()})) {
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return autoGeneratedId;
    }

    @Override
    public Conf getByID(int id) {
        List<Conf> conf;
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                     .prepareStatement(selectSql), new Object[]{id})) {
            conf = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Conf());
            if (!conf.isEmpty()) {
                return conf.get(0);
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return new Conf();
    }

    @Override
    public boolean update(Conf conf) {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                     .prepareStatement(updateSql), new Object[]{conf.getName(), conf.getPlace(), conf.getDate(), conf.getId()})) {
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public boolean delete(int id) {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy.prepareStatement(deleteSql), new Object[]{id})) {
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public List<Conf> getAll() {
        ArrayList<Conf> resultList = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(selectAllSql)) {
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Conf());
            if (!resultList.isEmpty()) {
                return resultList;
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    @Override
    public boolean clearAll() {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             Statement statement = connectionProxy.createStatement()) {
            statement.executeUpdate(clearAllSql);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }
}
