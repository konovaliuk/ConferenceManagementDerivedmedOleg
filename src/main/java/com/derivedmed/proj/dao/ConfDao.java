package com.derivedmed.proj.dao;

import com.derivedmed.proj.model.Conf;
import com.derivedmed.proj.util.PreparedStatmentCompilier;
import com.derivedmed.proj.util.rsparser.ResultSetParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class ConfDao implements CrudDao<Conf> {

    private static final Logger LOGGER = LogManager.getLogger(ConfDao.class);
    private static final String SQL_EXCEPTION = "SQL exception Conf DAO";
    private static final String SQL = "insert into confs (conf_name, conf_place, confDate) values (?, ? ,?)";
    private static final String SELECT_SQL = "select * from confs where conf_id = ?";
    private static final String UPDATE_SQL = "update confs set conf_name = ?, conf_place = ?, confDate = ?" +
            " where conf_id = ?";
    private static final String DELETE_SQL = "delete from confs where conf_id = ?";
    private static final String SELECT_ALL_SQL = "select * from confs";
    private static final String CLEAR_ALL_SQL = "delete from confs";
    private final TransactionManager TRANSACTION_MANAGER = TransactionManager.getInstance();
    private final ResultSetParser RESULT_SET_PARSER = ResultSetParser.getInstance();

    @Override
    public int create(Conf conf) {
        int autoGeneratedId = 0;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                     .prepareStatement(SQL, Statement.RETURN_GENERATED_KEYS), conf.getName(), conf.getPlace(), conf.getDate())) {
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return autoGeneratedId;
    }

    @Override
    public Conf getByID(int id) {
        List<Conf> conf;
        Conf conference = new Conf();
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                     .prepareStatement(SELECT_SQL), id)) {
            conf = RESULT_SET_PARSER.parse(preparedStatement.executeQuery(), new Conf());
            if (!conf.isEmpty()) {
                conference = conf.get(0);
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return conference;
    }

    @Override
    public boolean update(Conf conf) {
        boolean result = true;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                     .prepareStatement(UPDATE_SQL),
                     conf.getName(), conf.getPlace(), conf.getDate(), conf.getId())) {
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            result = false;
        }
        return result;
    }

    @Override
    public boolean delete(int id) {
        boolean result = true;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                     .prepareStatement(DELETE_SQL), id)) {
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            result = false;
        }
        return result;
    }
    @Override
    public List<Conf> getAll() {
        ArrayList<Conf> resultList = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(SELECT_ALL_SQL)) {
            resultList = RESULT_SET_PARSER.parse(preparedStatement.executeQuery(), new Conf());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    @Override
    public boolean clearAll() {
        boolean result = true;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             Statement statement = connectionProxy.createStatement()) {
            statement.executeUpdate(CLEAR_ALL_SQL);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            result = false;
        }
        return result;
    }
}
