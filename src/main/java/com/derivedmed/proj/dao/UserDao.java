package com.derivedmed.proj.dao;

import com.derivedmed.proj.model.Role;
import com.derivedmed.proj.model.User;
import com.derivedmed.proj.util.PreparedStatmentCompilier;
import com.derivedmed.proj.util.rsparser.ResultSetParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class UserDao implements CrudDao<User> {

    private static final Logger LOGGER = LogManager.getLogger(UserDao.class);
    private static final String SQL_EXCEPTION = "SQL exception user DAO";
    private static final String CREATE_SQL = "INSERT INTO users (roleId, login, password, email) VALUES (?, ?, ?, ?)";
    private static final String GET_BY_ID_SQL = "select * from users where user_id = ?";
    private static final String UPDATE_SQL = "update users set login = ?, password = ?, roleId = ?, email = ?," +
            " rating = ? where user_id = ?";
    private static final String DELETE_SQL = "delete from users where user_id =?";
    private static final String GET_SPEAKER_BY_REPORT_ID = "select user_id from users_reports where report_id = ? " +
            "and active_speaker = true";
    private static final String CHECK_SPEAKER_ACTIVE_BY_DATE_SQL = "SELECT users.* " +
            "FROM users " +
            "JOIN users_reports u ON users.user_id = u.user_id " +
            "JOIN reports r ON u.report_id = r.report_id " +
            "JOIN confs c ON r.conf_id = c.conf_id " +
            "WHERE roleId = ? AND active_speaker = ? AND c.confDate = ?";
    private static final String REGISTER_USER_TO_REPORT_SQL = "insert into users_reports (user_id, report_id) " +
            "values(?, ?)";
    private static final String GET_BY_RATING_SQL = "select * from users where roleId = ? order by rating desc";
    private static final String AUTH_SQL = "select * from users where email = ? and password = ?";
    private static final String GET_BY_LOGIN_SQL = "select * from users where email = ?";
    private static final String GET_ROLE_ID_SQL = "select roleId from roles where role_name = ?";
    private static final String GET_ROLE_SQL = "select role_name from roles where roleId = ?";
    private static final String VOTE_FIRST_SQL = "update users_reports set rating =? where user_id =? and report_id = ?";
    private static final String VOTE_SECOND_SQL = "update users set rating = rating + ? where user_id = ?";
    private static final String GET_ALL_SQL = "select * from users";
    private static final String DELETE_REPORT_FROM_USERS_REPORTS_SQ = "delete from users_reports where user_id = ?";
    private final TransactionManager TRANSACTION_MANAGER = TransactionManager.getInstance();
    private final ResultSetParser RESULT_SET_PARSER = ResultSetParser.getInstance();

    @Override
    public int create(User user) {
        int autoGeneratedId;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                             .prepareStatement(CREATE_SQL, Statement.RETURN_GENERATED_KEYS),
                     getRoleId(user.getRole()), user.getLogin(), user.getPassword(), user.getEmail())) {
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            autoGeneratedId = 0;
        }
        return autoGeneratedId;
    }

    @Override
    public User getByID(int id) {
        User user = new User();
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                     .prepareStatement(GET_BY_ID_SQL), id)) {
            List<User> resultList = RESULT_SET_PARSER.parse(preparedStatement.executeQuery(), user);
            if (!resultList.isEmpty()) {
                user = resultList.get(0);
                user.setRole(getRole(user.getRoleId()));
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return user;
    }

    @Override
    public boolean update(User user) {
        boolean result = true;
        user.setRoleId(getRoleId(user.getRole()));
        Object[] values = new Object[]{user.getLogin(), user.getPassword(), user.getRoleId(),
                user.getEmail(), user.getRating(), user.getId()};
        try (ConnectionProxy connection = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier
                     .setValues(connection.prepareStatement(UPDATE_SQL), values)) {
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            result = false;
        }
        return result;
    }

    @Override
    public boolean delete(int id) {
        boolean result = true;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(DELETE_SQL)) {
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            result = false;
        }
        return result;
    }

    @Override
    public List<User> getAll() {
        List<User> resultList = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ALL_SQL)) {
            resultList = RESULT_SET_PARSER.parse(preparedStatement.executeQuery(), new User());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList.stream().peek(user -> {
            Role role = getRole(user.getRoleId());
            user.setRole(role);
            user.setRoleString(role.name());
        }).collect(Collectors.toList());
    }

    @Override
    public boolean clearAll() {
        boolean result = true;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             Statement statement = connectionProxy.createStatement()) {
            String DELETE_ALL_SQL = "DELETE FROM users";
            statement.executeUpdate(DELETE_ALL_SQL);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            result = false;
        }
        return result;
    }

    public boolean deleteFromUsersReports(int userId) {
        boolean result = false;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                     .prepareStatement(DELETE_REPORT_FROM_USERS_REPORTS_SQ), userId)) {
            preparedStatement.executeUpdate();
            result = true;
        } catch (SQLException e) {
            LOGGER.error(e);
        }
        return result;
    }


    public boolean vote(int userId, int reportId, int rating) {
        boolean result = true;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(VOTE_FIRST_SQL);
             PreparedStatement preparedStatement1 = connectionProxy.prepareStatement(VOTE_SECOND_SQL)) {
            preparedStatement.setInt(1, rating);
            preparedStatement.setInt(2, userId);
            preparedStatement.setInt(3, reportId);
            preparedStatement.executeUpdate();
            preparedStatement1.setInt(1, rating);
            preparedStatement1.setInt(2, getSpeakerByReportId(connectionProxy, reportId));
            preparedStatement1.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            result = false;
        }
        return result;
    }

    public List<User> getSpeakersFreeThisDate(Timestamp timestamp) {
        List<User> busyspeakers = busySpeakersByDate(timestamp);
        List<User> speakers = getSpeakersByRating();
        return speakers.stream().filter(s -> !busyspeakers.contains(s))
                .collect(Collectors.toList());
    }

    public List<User> busySpeakersByDate(Timestamp timestamp) {
        List<User> busySpeakers = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = PreparedStatmentCompilier.setValues(connectionProxy
                             .prepareStatement(CHECK_SPEAKER_ACTIVE_BY_DATE_SQL),
                     getRoleId(Role.SPEAKER), true, timestamp)) {
            busySpeakers = RESULT_SET_PARSER.parse(preparedStatement.executeQuery(), new User());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return busySpeakers;
    }

    public boolean registerUserToReport(int userId, int reportId) {
        boolean result = true;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(REGISTER_USER_TO_REPORT_SQL)) {
            preparedStatement.setInt(1, userId);
            preparedStatement.setInt(2, reportId);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            result = false;
        }
        return result;
    }

    public List<User> getSpeakersByRating() {
        ArrayList<User> resultList = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_BY_RATING_SQL)) {
            preparedStatement.setInt(1, getRoleId(Role.SPEAKER));
            resultList = RESULT_SET_PARSER.parse(preparedStatement.executeQuery(), new User());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }


    public boolean authUser(String login, String password) {
        boolean result = false;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(AUTH_SQL)) {
            preparedStatement.setString(1, login);
            preparedStatement.setString(2, password);
            result = preparedStatement.executeQuery().next();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return result;
    }

    public User getByLogin(String login) {
        User user = new User();
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(GET_BY_LOGIN_SQL)) {
            preparedStatement.setString(1, login);
            ArrayList<User> users = RESULT_SET_PARSER.parse(preparedStatement.executeQuery(), new User());
            if (!users.isEmpty()) {
                user = users.get(0);
                user.setRole(getRole(user.getRoleId()));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return user;
    }

    private int getSpeakerByReportId(ConnectionProxy connectionProxy, int reportId) {
        int id = 0;
        try (PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_SPEAKER_BY_REPORT_ID)) {
            preparedStatement.setInt(1, reportId);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                id = resultSet.getInt(1);
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return id;
    }

    private int getRoleId(Role role) {
        int roleId = 0;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ROLE_ID_SQL)) {
            preparedStatement.setString(1, role.name());
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                roleId = resultSet.getInt(1);
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return roleId;
    }

    private Role getRole(int id) {
        Role role = null;
        try (ConnectionProxy connectionProxy = TRANSACTION_MANAGER.getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ROLE_SQL)) {
            preparedStatement.setInt(1, id);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                role = Role.valueOf(resultSet.getString(1).toUpperCase());
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return role;
    }
}
