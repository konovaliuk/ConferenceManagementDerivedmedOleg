package com.derivedmed.proj.dao;

import com.derivedmed.proj.model.MailData;
import com.derivedmed.proj.model.Report;
import com.derivedmed.proj.model.ReportOfferedBySpeaker;
import com.derivedmed.proj.util.QueryGenerator;
import com.derivedmed.proj.util.rsparser.ResultSetParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ReportDao implements CrudDao<Report> {

    private static Logger LOGGER = LogManager.getLogger(ReportDao.class);
    private final String SQL_EXCEPTION = "SQL exception Report DAO";


    @Override
    public int create(Report report) {
        int autoGeneratedId = 0;
        QueryGenerator queryGenerator = new QueryGenerator();
        String sql = queryGenerator.insert("reports", new String[]{"conf_id", "report_name", "report_desk"})
                .generate();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = queryGenerator.setValues(connectionProxy
                     .prepareStatement(sql, Statement.RETURN_GENERATED_KEYS), new Object[]{report.getConf_id(), report.getReport_name(), report.getReport_description()})) {
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return autoGeneratedId;
        }
        return autoGeneratedId;
    }

    @Override
    public Report getByID(int id) {
        QueryGenerator queryGenerator = new QueryGenerator();
        String sql = queryGenerator.select("*")
                .from("reports")
                .where("report_id", "=")
                .generate();
        List<Report> report = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = queryGenerator.setValues(connectionProxy.prepareStatement(sql), new Object[]{id})) {
            report = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
            if (!report.isEmpty()) {
                return report.get(0);
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return report.get(0);
    }

    @Override
    public boolean update(Report report) {
        QueryGenerator queryGenerator = new QueryGenerator();
        String sql = queryGenerator.update("reports")
                .set(new String[]{"conf_id", "report_name", "report_desk"})
                .where("report_id", "=")
                .generate();
        try (ConnectionProxy connection = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = queryGenerator.setValues(connection.prepareStatement(sql),
                     new Object[]{report.getConf_id(), report.getReport_name(), report.getReport_name(), report.getId()})) {
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public boolean delete(int id) {
        QueryGenerator queryGenerator = new QueryGenerator();
        String sql = queryGenerator.delete("reports")
                .where("report_id", "=")
                .generate();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = queryGenerator.setValues(connectionProxy.prepareStatement(sql), new Object[]{id})) {
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public List<Report> getAll() {
        QueryGenerator queryGenerator = new QueryGenerator();
        String sql = queryGenerator.select("*")
                .from("reports")
                .generate();
        List<Report> resultList = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(sql)) {
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
            if (!resultList.isEmpty()) {
                resultList = setSpeakersToReport(connectionProxy, resultList);
                return resultList;
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }
//
//    public List<Report> getAllConfirmed() {
//        List<Report> confirmed = new ArrayList<>();
//        String get_all_confirmed = "select r.* from reports r join users_reports ur on r.report_id = ur.report_id where confirmed = ?";
//        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
//             PreparedStatement preparedStatement = connectionProxy.prepareStatement(get_all_confirmed)) {
//            preparedStatement.setBoolean(1, true);
//            confirmed = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
//            confirmed = setSpeakersToReport(connectionProxy, confirmed);
//        } catch (SQLException e) {
//            LOGGER.error(SQL_EXCEPTION, e);
//        }
//        return confirmed;
//    }

    @Override
    public boolean clearAll() {
        QueryGenerator queryGenerator = new QueryGenerator();
        String sql = queryGenerator.delete("reports").generate();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             Statement statement = connectionProxy.createStatement()) {
            statement.executeUpdate(sql);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public List<Report> getReportsByUserId(int id) {
        QueryGenerator queryGenerator = new QueryGenerator();
        String sql = queryGenerator.select("r.report_id, r.conf_id, report_name, report_desk")
                .from("reports r")
                .join("users_reports ur", "r.report_id = ur.report_id")
                .where("ur.user_id", "=")
                .generate();
        List<Report> reports = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = queryGenerator.setValues(connectionProxy.prepareStatement(sql), new Object[]{id})) {
            ;
            reports = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
            if (!reports.isEmpty()) {
                reports = setSpeakersToReport(connectionProxy, reports);
                return reports;
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return reports;
    }

//    public List<Report> getPastReports() {
//        ArrayList<Report> reports = new ArrayList<>();
//        String GET_PAST_REPORTS_SQL = "SELECT reports.report_id,conf_id, report_name,report_desk FROM reports JOIN confs c ON reports.conf_id = c.conf_id WHERE c.conf_date < ?;";
//        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
//             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_PAST_REPORTS_SQL)) {
//            preparedStatement.setTimestamp(1, new Timestamp(new Date().getTime()));
//            reports = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
//        } catch (SQLException e) {
//            LOGGER.error(SQL_EXCEPTION, e);
//        }
//        return reports;
//    }

//    public List<Report> getUpcomingReports() {
//        ArrayList<Report> reports = new ArrayList<>();
//        String GET_UPCOMING_REPORTS_SQL = "SELECT reports.report_id,conf_id, report_name,report_desk FROM reports JOIN confs c ON reports.conf_id = c.conf_id WHERE c.conf_date > ?;";
//        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
//             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_UPCOMING_REPORTS_SQL)) {
//            preparedStatement.setTimestamp(1, new Timestamp(new Date().getTime()));
//            reports = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
//        } catch (SQLException e) {
//            LOGGER.error(SQL_EXCEPTION, e);
//        }
//        return reports;
//    }

    public boolean offerReport(int speakerId, int reportId, boolean bySpeaker) {
        QueryGenerator queryGenerator = new QueryGenerator();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection()) {
            String sql = updateOrInsert(connectionProxy, speakerId, reportId);
            PreparedStatement preparedStatement = queryGenerator.setValues(connectionProxy.prepareStatement(sql),
                    new Object[]{false, bySpeaker, !bySpeaker, false, speakerId, reportId});
            preparedStatement.executeUpdate();
            preparedStatement.close();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    private String updateOrInsert(ConnectionProxy connectionProxy, int speakerId, int reportId) {
        QueryGenerator queryGenerator = new QueryGenerator();
        String result = "";
        String sql = queryGenerator.select("*")
                .from("users_reports")
                .where("user_id", "=")
                .and("report_id", "=")
                .generate();
        try (PreparedStatement preparedStatement = queryGenerator.setValues(connectionProxy.prepareStatement(sql), new Object[]{speakerId, reportId});
             ResultSet resultSet = preparedStatement.executeQuery()) {
            if (!resultSet.next()) {
                result = new QueryGenerator()
                        .insert("users_reports", new String[]{"active_speaker", "by_speaker", "by_moder", "confirmed", "user_id", "report_id"})
                        .generate();
            } else {
                result = new QueryGenerator()
                        .update("users_reports")
                        .set(new String[]{"active_speaker", "by_speaker", "by_moder", "confirmed"})
                        .where("user_id", "=")
                        .and("report_id", "=")
                        .generate();
            }

        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return result;
    }

    public boolean confirmOffer(int userId, int reportId) {
        QueryGenerator update = new QueryGenerator();
        QueryGenerator insert = new QueryGenerator();
        QueryGenerator secondQuery = new QueryGenerator();
        String secondSql = secondQuery.update("users_reports")
                .set(new String[]{"by_moder", "by_speaker",})
                .where("report_id", "=")
                .and("user_id", "<>")
                .generate();
        String sql;
        if (isSpeakerReportExist(userId, reportId)) {
            sql = update.update("users_reports")
                    .set(new String[]{"active_speaker", "confirmed"})
                    .where("user_id", "=")
                    .and("report_id", "=")
                    .generate();
        } else {
            sql = insert.insert("users_reports", new String[]{"active_speaker", "confirmed", "user_id", "report_id"})
                    .generate();
        }
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = update.setValues(connectionProxy.prepareStatement(sql), new Object[]{true, true, userId, reportId});
             PreparedStatement preparedStatement1 = secondQuery.setValues(connectionProxy.prepareStatement(secondSql), new Object[]{false, false, reportId, userId})) {
            preparedStatement.executeUpdate();
            preparedStatement1.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    private boolean isSpeakerReportExist(int userid, int reportid) {
        boolean exist = false;
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement("select* from users_reports where user_id =? and report_id=?")) {
            preparedStatement.setInt(1, userid);
            preparedStatement.setInt(2, reportid);
            ResultSet resultSet = preparedStatement.executeQuery();
            exist = resultSet.next();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return exist;
    }


    public List<Report> getByConf(int id) {
        List<Report> result = new ArrayList<>();
        String GET_BY_CONF = "select * from reports where conf_id =? and confirmed = ?";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_BY_CONF)) {
            preparedStatement.setInt(1, id);
            preparedStatement.setBoolean(2, true);
            result = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
            result = setSpeakersToReport(connectionProxy, result);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return result;
    }

    public List<Report> getReportsWithSpeakers(int confId) {
        List<Report> result = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement("select report_id,conf_id,report_name,report_desk from reports join users_reports on reports.report_id = users_reports.report_id where conf_id =? and active_speaker =?");) {
            preparedStatement.setInt(1, confId);
            preparedStatement.setBoolean(2, true);
            result = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
            result = setSpeakersToReport(connectionProxy, result);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return result;
    }

    public List<Report> getReportsOfferedBySpeakerOrModer(int userid, boolean bySpeaker) {
        String OFFERED_BY_SPEAKER_SQL = "select reports.report_id,conf_id,report_name,report_desk from reports join users_reports on reports.report_id = users_reports.report_id where user_id =? and by_speaker =? and by_moder =?";
        List<Report> reports = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(OFFERED_BY_SPEAKER_SQL)) {
            preparedStatement.setInt(1, userid);
            preparedStatement.setBoolean(2, bySpeaker);
            preparedStatement.setBoolean(3, !bySpeaker);
            reports = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
            reports = setSpeakersToReport(connectionProxy, reports);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return reports;
    }


    public List<Integer> votedByUser(int user_id) {
        List<Integer> reports = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement("select report_id from users_reports where user_id =? and rating > 0")) {
            preparedStatement.setInt(1, user_id);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                reports.add(resultSet.getInt(1));
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return reports;
    }

    public List<ReportOfferedBySpeaker> reportsOfferedBySpeakers(boolean confirmed) {

        List<ReportOfferedBySpeaker> reportOfferedBySpeakers = new ArrayList<>();
        QueryGenerator queryGenerator = new QueryGenerator();
        String sql = queryGenerator.select("c.conf_id, confirmed, ur.user_id, ur.report_id, u.login, r.report_name, c.conf_name, c.conf_date")
                .from("users u")
                .join("users_reports ur", "u.user_id = ur.user_id")
                .join("reports r", "ur.report_id = r.report_id")
                .join("confs c", "r.conf_id = c.conf_id")
                .where("u.role_id", "=")
                .and("by_speaker", "=")
                .and("confirmed", "=")
                .and("active_speaker", "=").generate();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = queryGenerator.setValues(connectionProxy.prepareStatement(sql), new Object[]{3, true, confirmed, confirmed})) {
            reportOfferedBySpeakers = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new ReportOfferedBySpeaker());
            if (!reportOfferedBySpeakers.isEmpty()) {
                return reportOfferedBySpeakers;
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return reportOfferedBySpeakers;
    }

    public List<MailData> getDataForNotifications(Timestamp time) {
        QueryGenerator queryGenerator = new QueryGenerator();
        List<MailData> result = new ArrayList<>();
        long oneDayMillis = 24 * 60 * 60 * 1000;
        Timestamp nextDay = new Timestamp(time.getTime() + oneDayMillis);
        String sql = "select r.report_name, u.email, u.login, c.conf_name, c.conf_place, c.conf_date from users u join users_reports ur on u.user_id = ur.user_id join reports r on ur.report_id = r.report_id join confs c on r.conf_id = c.conf_id where c.conf_date>? and c.conf_date<? group by u.email";
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = queryGenerator.setValues(connectionProxy.prepareStatement(sql), new Object[]{time, nextDay})) {
            result = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new MailData());
            if (!result.isEmpty()) {
                return result;
            }

        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return result;
    }

    private List<Report> setSpeakersToReport(ConnectionProxy connectionProxy, List<Report> result) {
        try (PreparedStatement preparedStatement = connectionProxy.prepareStatement("select login from users u join users_reports ur on u.user_id = ur.user_id where report_id = ? and active_speaker = ?")) {
            for (Report report : result) {
                preparedStatement.setInt(1, report.getId());
                preparedStatement.setBoolean(2, true);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (resultSet.next()) {
                    report.setSpeakerName(resultSet.getString(1));
                }
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return result;
    }

}
